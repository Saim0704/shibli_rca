export interface BaseModel {
  _id?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

export const UserTypes = ['ADMIN', 'USER'] as const;
export type IUserType = (typeof UserTypes)[number];

export interface IUser extends BaseModel {
  name: string;
  password: string;
  email: string;
  type: IUserType;
}

export interface IAchievement extends BaseModel {
  title: string;
  subtitle?: string;
  description: string;
  photo?: string;
}

export interface IConfig {
  _id?: string;
  name: string;
  value: string;
}

export interface IEvent extends BaseModel {
  name: string;
  location: string;
  description?: string;
  startDate: Date;
  endDate: Date;
  contact?: string;
}

export interface IGallery extends BaseModel {
  name: string;
  image: string;
  description?: string;
}

export interface INotice extends BaseModel {
  title: string;
  description: string;
  issuedBy: string;
}

export interface IOtp {
  email: string;
  otp: number;
}

export interface IAddress {
  cityOrTown: string;
  state: string;
  district: string;
  landMark: string;
  postalCode: string;
}

export interface IEducation {
  passYear: number;
  percentage: number;
  boardOrUni: string;
}

export interface IEarlierCompetitiveExams {
  name: string;
  year: number;
  cleared: boolean;
}

export interface IRegistration extends BaseModel {
  user: IUser; // ObjectId
  currentStep: number;
  gender: string;
  fatherName: string;
  motherName: string;
  dateOfBirth: Date; // also calculate age from this
  mobileNumber: string;
  phoneNumber?: string;
  permanentAddress: IAddress;
  correspondenceAddress: IAddress;
  education: {
    matriculation: IEducation;
    intermediate: IEducation;
    graduation: IEducation;
    other: IEducation;
  };
  languageOfExam: string;
  testCenter: ITestCenter; // ObjectId
  transactionId: string;
  earlierCompetitiveExams: Array<IEarlierCompetitiveExams>;
  agreeToTerms: {
    informationIsCorrect: boolean;
    rightToChange: boolean;
  };
  rollNumber?: string; // generated by backend
  category: string; // General, SC/ST, OBC, PWD, Gen-EWS, EWS
  registerComplete?: boolean;
  // Static Assets
  photograph: string;
  signature: string;
  aadharCard?: string;
  lastSemesterCertificate?: string;
}

export const genders = ['M', 'F', 'O'] as const;

export interface ITestCenter extends BaseModel {
  codeName: string;
  address: string;
  mobileNumber?: string;
  email?: string;
}

export interface ITestimonial extends BaseModel {
  name: string;
  role: string;
  photo: string;
  testimonial: string;
}
